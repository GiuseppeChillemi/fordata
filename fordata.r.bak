; Red []
Rebol [
	Name: "FORDATA"
	Purpose: {Run a for loop on data-table with headings
	The loop is run having the fields for each line available
	as object elements on the word you have provided
	A /WHERE refinement is available and you can specify a condition for the loop to be exectude (ALL BLOCK condition)
	}
	Version: 1.2
	Author: "Giuseppe Chillemi"
	TBD: {
		remove placeholder characters, leave an ALL with a custom starting (ending?) placeholder
	
		Document placeholder working in code
	
		Add columns/data length verification and error message

		Investigate on the advantages of not using an object but a simple block to store row values
		whenever possible, it should avoid the overhead of context creation which should be meaningful
		for very large data blocks
		
		Add columns name warnings if column name visual is different than original once converted. Consider
			moving to block with string
		
		Add support for all data schemes listed in CSV codec: https://github.com/red/red/wiki/CSV-codec with, maybe, autosense

		Investigate on using on array of functions/objects and other data
		
		Test direct modification of data and its safeness
	
		Investigate on a way to not make accessible to passed code other function words other than word object
		
		Add support to custom datatypes/data structures once created a specification
		
		Add /noheadings refinement where you access data via letters or numbers autoassigned by the system
		
		Add a /size refinement for flat blocks
		
		load-csv /header working should be considered or /noheader ?
		
		Should FORDATA be renamed to FORROW ? Ok, it sound weird with those double R but it is more meaningful
	}
	History: {
		1.1: Headings block (first data block) no longer copied
		1.1: Added comments
		1.1: Remove the row word from global context
		1.1: added TBD and HISTORY to the header
		1.2: added placeholder mantaining
	}
	Note: {}
]


fordata: func [
	{Iterate a block of code on data block where columns data is retrieved using column name
	either in a block or as placeholder-value pair stored in a block 
	note: (it should be provided to an external function}

	'data-name [word!]
	;Annotation: Word binding should be the main one once object is created. To be verified, just in case 
	"The object name"
	data-block [block!]
	"the source with headings on top"
	code-block [block!]
	"The code to execute"
	/placeh
	{Word that contains placegolders and their corresponding value $$$field$$$
	a special $$$$all$$$$ placeholder is available with is set to a block containing all the fields
	if a custom placeholder character(s) is provided the ALL word will be surraunder by 2x placeholder
	character on each side
	}
	'ph-word [word!]
	"The word that will contain the placeholder-value data"
	/ph 
	"A custom placeholder will be provided"
	pchar [string!]
	"The placeholder surrounding character(s)"
	/where
	"Condition for data filtering"
	condition [block!]
	"Block where you can use WORD/COLUMN in a condition to express valid ROWS (It is an ALL BLOCK condition)"

	/local
	headings
	row-obj-specs
	ph-container
	ph-character
;	ph-word
] 
[
;	ph-word: to-string data-name
;	either none? ph [ph-character: "$$"] [ph-character: copy pchar]
	;=== Init phase ===
	row-obj-specs: copy []

	headings: first data-block																										;Get the headings on the first line of data


	data-block: next data-block																										;Data block starts from the second block on
	
																					;Init the specs block fort the object which will be
																																								;	named as DATA-NAME arg content

	;=== Main loop ===
	;Iterates for all data
	forall data-block [
		if not none? placeh [
			ph-container: copy []
;			append ph-container to-string rejoin [ph-character ph-character "all" ph-character ph-character]
			append/only ph-container copy headings
		]

		
		;Create the specs block assignining column values to object words which will have the same nae of the columns
		forall headings [
			
			;Iterate throught the headings and append a SET-WORD with heading name to the object spec
			;ie: [Customer:]
			append row-obj-specs to-set-word first headings
;			if not none? placeh [append ph-container to-string rejoin [ph-character first headings ph-character]]
			if not none? placeh [append ph-container to-string first headings]

			
			;Append the value of the corresponding column to the object specs
			;ie: [Costomer-name: "Amazon"] 
			append row-obj-specs data-block/1/(index? headings)
			if not none? placeh [append ph-container data-block/1/(index? headings)]

		]



		;The following code creates the object with the provided specs
		;Example: do [myrow: make object! [customer: "amazon"]] ;(if row name provided is MYROW)
		do reduce [to-set-word data-name make object! row-obj-specs]

		; Executes the block of code provided to the function
		either where = true [
			if all condition [
				if not none? placeh [do reduce [to-set-word ph-word probe copy ph-container]]
				do code-block
			]
		]
		[
			do code-block			
		]
	]

	;=== Cleaning ====
	;Remove the row object word from global word list
	unset data-name
	if not none? placeh [unset ph-word]
]

